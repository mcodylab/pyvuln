trigger:
- main  # O el branch donde quieres ejecutarlo

pool:
   name: 'Agent'

variables:
  - group: varcody    # Contiene la variable SNYK_TOKEN

steps:
- checkout: self 


- script: chmod +x $(Build.SourcesDirectory) -R
  displayName: 'Dar permisos a los archivos'

# 1️⃣ Verifica el entorno del pipeline
- script: |
    echo "📂 Directorio actual:"
    pwd
    echo "📂 Archivos disponibles:"
    ls -lhR $(Build.SourcesDirectory)
  displayName: '📂 Verificar entorno antes de Snyk'


# 1️⃣ Verifica el entorno del pipeline
- script: |
    echo "📂 Pip freeze:"
     pip freeze > requirements.txt
    echo "📂 Validacion:"
    pip check
  displayName: '📂 Validaciones requirements - validaciones '


# 2️⃣ Instalar Snyk CLI si no está disponible






# 3️⃣ Autenticar con Snyk Web
- script: |
    echo "🔑 Autenticando Snyk..."
    snyk auth $(SNYK_TOKEN)
  displayName: '🔑 Autenticación en Snyk'

# 4️⃣ Ejecutar análisis de seguridad en código fuente
- script: |
    echo "🔍 Ejecutando Snyk Test..."
    snyk auth $(SNYK_TOKEN)
    snyk test --project-name="$(Build.Repository.Name)" --json-file-output=$(Build.SourcesDirectory)/snyk-code-report.json || echo "⚠️ Error en Snyk Test"
    snyk monitor --project-name="$(Build.Repository.Name)" || echo "⚠️ Error al enviar datos a Snyk Web"
  displayName: '🔍 Ejecutar Snyk Test'

# 7️⃣ Enviar resultados a Snyk Web
- script: |
    echo "📡 Enviando datos a Snyk Web..."
    snyk monitor --project-name="$(Build.Repository.Name)" || echo "⚠️ Error al enviar datos a Snyk Web"
  displayName: '📡 Enviar datos a Snyk Web'








# 📂 Verificar archivos en Build.SourcesDirectory
- script: |
    echo "📂 Contenido de Build.SourcesDirectory después de conversión:"
    ls -l $(Build.SourcesDirectory)
  displayName: "Verificar archivos en Build.SourcesDirectory"


# 3️⃣ Convertir JSON a HTML con formato
- script: |
    echo "🔄 Convirtiendo JSON a HTML..."
    echo "<html><head><title>Snyk Report</title><style>table {width: 100%; border-collapse: collapse;} th, td {border: 1px solid black; padding: 8px; text-align: left;} th {background-color: #f2f2f2;}</style></head><body><h1>Resultados de Análisis</h1><table><tr><th>ID</th><th>Severidad</th><th>Paquete</th><th>Vulnerabilidad</th><th>CVSS</th><th>Más Información</th></tr>" > $(Build.ArtifactStagingDirectory)/snyk-report.html
    cat $(Build.SourcesDirectory)/snyk-code-report.json | jq -r '
    .vulnerabilities[] | 
    "<tr><td>\(.id)</td><td>\(.severity)</td><td>\(.moduleName)</td><td>\(.title)</td><td>\(.cvssScore)</td><td><a href=\"\(.references[0].url)\">Detalles</a></td></tr>"' >> $(Build.ArtifactStagingDirectory)/snyk-report.html
    echo "</table></body></html>" >> $(Build.ArtifactStagingDirectory)/snyk-report.html
  displayName: "🔄 Convertir JSON a HTML"

# 4️⃣ Verificar que los archivos se generaron en ArtifactStagingDirectory
- script: |
    echo "📂 Contenido de Build.ArtifactStagingDirectory después de conversión:"
    ls -l $(Build.ArtifactStagingDirectory)
  displayName: "📂 Verificar archivos en ArtifactStagingDirectory"

# 5️⃣ Publicar el JSON y el HTML como artefactos
- task: PublishPipelineArtifact@1
  inputs:
    targetPath: '$(Build.ArtifactStagingDirectory)/snyk-code-report.json'
    artifactName: 'snyk-json-report'
  displayName: '📤 Publicar Reporte JSON de Snyk'

- task: PublishPipelineArtifact@1
  inputs:
    targetPath: '$(Build.ArtifactStagingDirectory)/snyk-report.html'
    artifactName: 'snyk-html-report'
  displayName: '📤 Publicar Reporte HTML de Snyk'

# 6️⃣ Intentar mostrar el reporte en la pestaña de Code Coverage
- task: PublishCodeCoverageResults@1
  inputs:
    codeCoverageTool: 'Cobertura'
    summaryFileLocation: '$(Build.ArtifactStagingDirectory)/snyk-report.html'
    reportDirectory: '$(Build.ArtifactStagingDirectory)/'
  displayName: '📤 Publicar Reporte como Code Coverage'