trigger:
- main  # O el branch donde quieres ejecutarlo

pool:
   name: 'Agent'

variables:
  - group: varcody    # Contiene la variable SNYK_TOKEN

steps:
- checkout: self 


- script: chmod +x $(Build.SourcesDirectory) -R
  displayName: 'Dar permisos a los archivos'

# 1️⃣ Verifica el entorno del pipeline
- script: |
    echo "📂 Directorio actual:"
    pwd
    echo "📂 Archivos disponibles:"
    ls -lhR $(Build.SourcesDirectory)
  displayName: '📂 Verificar entorno antes de Snyk'


# 1️⃣ Verifica el entorno del pipeline
- script: |
    echo "📂 Pip freeze:"
     pip freeze > requirements.txt
    echo "📂 Validacion:"
    pip check
  displayName: '📂 Validaciones requirements - validaciones '


# 2️⃣ Instalar Snyk CLI si no está disponible






# 3️⃣ Autenticar con Snyk Web
- script: |
    echo "🔑 Autenticando Snyk..."
    snyk auth $(SNYK_TOKEN)
  displayName: '🔑 Autenticación en Snyk'

# 4️⃣ Ejecutar análisis de seguridad en código fuente
- script: |
    echo "🔍 Ejecutando Snyk Test..."
    snyk auth $(SNYK_TOKEN)
    snyk test --project-name="$(Build.Repository.Name)" --json-file-output=$(Build.SourcesDirectory)/snyk-code-report.json || echo "⚠️ Error en Snyk Test"
    snyk monitor --project-name="$(Build.Repository.Name)" || echo "⚠️ Error al enviar datos a Snyk Web"
  displayName: '🔍 Ejecutar Snyk Test'


# 2️⃣ Verificar que el JSON se generó correctamente
- script: |
    echo "📂 Verificando que Snyk generó el reporte JSON..."
    ls -l $(Build.SourcesDirectory)
  displayName: "📂 Verificar archivos generados por Snyk"

# 3️⃣ Mover JSON a ArtifactStagingDirectory
- script: |
    echo "🚀 Moviendo JSON a ArtifactStagingDirectory..."
    mv $(Build.SourcesDirectory)/snyk-code-report.json $(Build.ArtifactStagingDirectory)/
  displayName: "📂 Mover JSON a ArtifactStagingDirectory"

# 4️⃣ Convertir JSON a Markdown para la pestaña Summary
- script: |
    echo "🔄 Convirtiendo JSON a Markdown..."
    echo "# Snyk Report" > $(Build.ArtifactStagingDirectory)/snyk-report.md
    echo "### Vulnerabilidades Encontradas" >> $(Build.ArtifactStagingDirectory)/snyk-report.md
    cat $(Build.ArtifactStagingDirectory)/snyk-code-report.json | jq -r '
    .vulnerabilities[] | 
    "#### \(.id)\n- **Severidad:** \(.severity)\n- **Paquete:** \(.moduleName)\n- **Vulnerabilidad:** \(.title)\n- **CVSS Score:** \(.cvssScore)\n- [Detalles](\(.references[0].url))\n"' >> $(Build.ArtifactStagingDirectory)/snyk-report.md
  displayName: "🔄 Convertir JSON a Markdown"

# 5️⃣ Publicar Reporte Markdown en Summary
- task: PublishPipelineArtifact@1
  inputs:
    targetPath: '$(Build.ArtifactStagingDirectory)/snyk-report.md'
    artifactName: 'snyk-markdown-report'
  displayName: '📤 Publicar Reporte Markdown'

# 6️⃣ Publicar Markdown como Summary
- task: PowerShell@2
  inputs:
    targetType: 'inline'
    script: |
      echo "## Snyk Report" > $(Build.ArtifactStagingDirectory)/snyk-summary.md
      Get-Content -Path "$(Build.ArtifactStagingDirectory)/snyk-report.md" | Out-File -FilePath "$(Build.ArtifactStagingDirectory)/snyk-summary.md" -Append
  displayName: "Generar Summary"
  condition: succeeded()

- task: PublishPipelineArtifact@1
  inputs:
    targetPath: '$(Build.ArtifactStagingDirectory)/snyk-summary.md'
    artifactName: 'snyk-summary'
  displayName: '📤 Publicar Summary'

- task: PublishBuildArtifacts@1
  inputs:
    targetPath: '$(Build.ArtifactStagingDirectory)'
    artifactName: 'snyk-reports'
  displayName: 'Publicar todos los reportes'