trigger:
- main  # Se ejecuta en cada cambio en main

pr:
- main  # También se ejecuta en cada Pull Request a main

pool:
  vmImage: 'ubuntu-latest'  # Máquina virtual para ejecutar el pipeline

variables:
- group: varcody  # Grupo de variables con credenciales de JFrog

steps:

  - script: |
    
     pip install --no-cache-dir --index-url https://pypi.org/simple --upgrade pip  # Actualiza pip
     pip install --no-cache-dir --index-url https://pypi.org/simple  -r requirements.txt  # Instala dependencias
    displayName: 'Instalar dependencias'

  - task: SnykSecurityScan@1
    inputs:
      serviceConnectionEndpoint: 'snykcon'
      testType: 'app'
      monitorWhen: 'never'  # Deshabilita `snyk monitor` aquí para evitar el error
      failOnIssues: false
      additionalArguments: '--json-file-output=$(Build.SourcesDirectory)/snyk-report.json'
  
  - script: |
      npm install -g snyk  # Instala Snyk CLI
      snyk auth $(SNYK_TOKEN)  # Autentica con Snyk
      snyk test --json > $(Build.SourcesDirectory)/snyk-report.json
      snyk test --json-file-output=$(Build.SourcesDirectory)/snyk-report.json
    displayName: 'Forzar salida JSON'

  - script: |
      echo "📂 Listando archivos en $(Build.SourcesDirectory):"
      ls -lh $(Build.SourcesDirectory)

      echo "📄 Mostrando contenido de snyk-report.json:"
      cat $(Build.SourcesDirectory)/snyk-report.json || echo "⚠️ No se encontró snyk-report.json"

    displayName: '🔍 Verificar reporte JSON'

  - task: PublishPipelineArtifact@1
    inputs:
      targetPath: '$(Build.SourcesDirectory)/snyk-report.json'                                                                                                                                                                          
      artifactName: 'snyk-security-report'